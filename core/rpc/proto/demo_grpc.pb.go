// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: demo.proto

package calculator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Calculator_Add_FullMethodName      = "/calculator.Calculator/Add"
	Calculator_Subtract_FullMethodName = "/calculator.Calculator/Subtract"
)

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务
type CalculatorClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Subtract(ctx context.Context, in *SubtractRequest, opts ...grpc.CallOption) (*SubtractResponse, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, Calculator_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Subtract(ctx context.Context, in *SubtractRequest, opts ...grpc.CallOption) (*SubtractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubtractResponse)
	err := c.cc.Invoke(ctx, Calculator_Subtract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility.
//
// 定义服务
type CalculatorServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Subtract(context.Context, *SubtractRequest) (*SubtractResponse, error)
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalculatorServer struct{}

func (UnimplementedCalculatorServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalculatorServer) Subtract(context.Context, *SubtractRequest) (*SubtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}
func (UnimplementedCalculatorServer) testEmbeddedByValue()                    {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	// If the following call pancis, it indicates UnimplementedCalculatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Calculator_ServiceDesc, srv)
}

func _Calculator_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_Subtract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Subtract(ctx, req.(*SubtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculator_ServiceDesc is the grpc.ServiceDesc for Calculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculator_Add_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _Calculator_Subtract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

const (
	ClientUnaryServerStream_PrimeFactors_FullMethodName = "/calculator.ClientUnaryServerStream/PrimeFactors"
)

// ClientUnaryServerStreamClient is the client API for ClientUnaryServerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务端流式
type ClientUnaryServerStreamClient interface {
	// 质因数分解，将分解的每一个质因数通过流式传输的方式逐一返回给客户端
	PrimeFactors(ctx context.Context, in *PrimeFactorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PrimeFactorsResponse], error)
}

type clientUnaryServerStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewClientUnaryServerStreamClient(cc grpc.ClientConnInterface) ClientUnaryServerStreamClient {
	return &clientUnaryServerStreamClient{cc}
}

func (c *clientUnaryServerStreamClient) PrimeFactors(ctx context.Context, in *PrimeFactorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PrimeFactorsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientUnaryServerStream_ServiceDesc.Streams[0], ClientUnaryServerStream_PrimeFactors_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PrimeFactorsRequest, PrimeFactorsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientUnaryServerStream_PrimeFactorsClient = grpc.ServerStreamingClient[PrimeFactorsResponse]

// ClientUnaryServerStreamServer is the server API for ClientUnaryServerStream service.
// All implementations must embed UnimplementedClientUnaryServerStreamServer
// for forward compatibility.
//
// 服务端流式
type ClientUnaryServerStreamServer interface {
	// 质因数分解，将分解的每一个质因数通过流式传输的方式逐一返回给客户端
	PrimeFactors(*PrimeFactorsRequest, grpc.ServerStreamingServer[PrimeFactorsResponse]) error
	mustEmbedUnimplementedClientUnaryServerStreamServer()
}

// UnimplementedClientUnaryServerStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientUnaryServerStreamServer struct{}

func (UnimplementedClientUnaryServerStreamServer) PrimeFactors(*PrimeFactorsRequest, grpc.ServerStreamingServer[PrimeFactorsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PrimeFactors not implemented")
}
func (UnimplementedClientUnaryServerStreamServer) mustEmbedUnimplementedClientUnaryServerStreamServer() {
}
func (UnimplementedClientUnaryServerStreamServer) testEmbeddedByValue() {}

// UnsafeClientUnaryServerStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientUnaryServerStreamServer will
// result in compilation errors.
type UnsafeClientUnaryServerStreamServer interface {
	mustEmbedUnimplementedClientUnaryServerStreamServer()
}

func RegisterClientUnaryServerStreamServer(s grpc.ServiceRegistrar, srv ClientUnaryServerStreamServer) {
	// If the following call pancis, it indicates UnimplementedClientUnaryServerStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientUnaryServerStream_ServiceDesc, srv)
}

func _ClientUnaryServerStream_PrimeFactors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeFactorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientUnaryServerStreamServer).PrimeFactors(m, &grpc.GenericServerStream[PrimeFactorsRequest, PrimeFactorsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientUnaryServerStream_PrimeFactorsServer = grpc.ServerStreamingServer[PrimeFactorsResponse]

// ClientUnaryServerStream_ServiceDesc is the grpc.ServiceDesc for ClientUnaryServerStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientUnaryServerStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.ClientUnaryServerStream",
	HandlerType: (*ClientUnaryServerStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeFactors",
			Handler:       _ClientUnaryServerStream_PrimeFactors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "demo.proto",
}

const (
	ClientStreamServerUnary_Average_FullMethodName = "/calculator.ClientStreamServerUnary/Average"
)

// ClientStreamServerUnaryClient is the client API for ClientStreamServerUnary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 客户端流式
type ClientStreamServerUnaryClient interface {
	// 客户端以流的形式连续发送多个整数，服务端接收所有整数后，计算它们的平均值，并将这个平均值作为单一响应返回给客户端。
	Average(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AverageRequest, AverageResponse], error)
}

type clientStreamServerUnaryClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamServerUnaryClient(cc grpc.ClientConnInterface) ClientStreamServerUnaryClient {
	return &clientStreamServerUnaryClient{cc}
}

func (c *clientStreamServerUnaryClient) Average(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AverageRequest, AverageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientStreamServerUnary_ServiceDesc.Streams[0], ClientStreamServerUnary_Average_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AverageRequest, AverageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientStreamServerUnary_AverageClient = grpc.ClientStreamingClient[AverageRequest, AverageResponse]

// ClientStreamServerUnaryServer is the server API for ClientStreamServerUnary service.
// All implementations must embed UnimplementedClientStreamServerUnaryServer
// for forward compatibility.
//
// 客户端流式
type ClientStreamServerUnaryServer interface {
	// 客户端以流的形式连续发送多个整数，服务端接收所有整数后，计算它们的平均值，并将这个平均值作为单一响应返回给客户端。
	Average(grpc.ClientStreamingServer[AverageRequest, AverageResponse]) error
	mustEmbedUnimplementedClientStreamServerUnaryServer()
}

// UnimplementedClientStreamServerUnaryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientStreamServerUnaryServer struct{}

func (UnimplementedClientStreamServerUnaryServer) Average(grpc.ClientStreamingServer[AverageRequest, AverageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedClientStreamServerUnaryServer) mustEmbedUnimplementedClientStreamServerUnaryServer() {
}
func (UnimplementedClientStreamServerUnaryServer) testEmbeddedByValue() {}

// UnsafeClientStreamServerUnaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamServerUnaryServer will
// result in compilation errors.
type UnsafeClientStreamServerUnaryServer interface {
	mustEmbedUnimplementedClientStreamServerUnaryServer()
}

func RegisterClientStreamServerUnaryServer(s grpc.ServiceRegistrar, srv ClientStreamServerUnaryServer) {
	// If the following call pancis, it indicates UnimplementedClientStreamServerUnaryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientStreamServerUnary_ServiceDesc, srv)
}

func _ClientStreamServerUnary_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamServerUnaryServer).Average(&grpc.GenericServerStream[AverageRequest, AverageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientStreamServerUnary_AverageServer = grpc.ClientStreamingServer[AverageRequest, AverageResponse]

// ClientStreamServerUnary_ServiceDesc is the grpc.ServiceDesc for ClientStreamServerUnary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStreamServerUnary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.ClientStreamServerUnary",
	HandlerType: (*ClientStreamServerUnaryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Average",
			Handler:       _ClientStreamServerUnary_Average_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "demo.proto",
}

const (
	ClientStreamServerStream_Chat_FullMethodName = "/calculator.ClientStreamServerStream/Chat"
)

// ClientStreamServerStreamClient is the client API for ClientStreamServerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 双向流式
type ClientStreamServerStreamClient interface {
	// 双方可以在通信过程中随时发送和接收消息，类似于实时聊天的场景。
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error)
}

type clientStreamServerStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamServerStreamClient(cc grpc.ClientConnInterface) ClientStreamServerStreamClient {
	return &clientStreamServerStreamClient{cc}
}

func (c *clientStreamServerStreamClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientStreamServerStream_ServiceDesc.Streams[0], ClientStreamServerStream_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientStreamServerStream_ChatClient = grpc.BidiStreamingClient[ChatMessage, ChatMessage]

// ClientStreamServerStreamServer is the server API for ClientStreamServerStream service.
// All implementations must embed UnimplementedClientStreamServerStreamServer
// for forward compatibility.
//
// 双向流式
type ClientStreamServerStreamServer interface {
	// 双方可以在通信过程中随时发送和接收消息，类似于实时聊天的场景。
	Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error
	mustEmbedUnimplementedClientStreamServerStreamServer()
}

// UnimplementedClientStreamServerStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientStreamServerStreamServer struct{}

func (UnimplementedClientStreamServerStreamServer) Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedClientStreamServerStreamServer) mustEmbedUnimplementedClientStreamServerStreamServer() {
}
func (UnimplementedClientStreamServerStreamServer) testEmbeddedByValue() {}

// UnsafeClientStreamServerStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamServerStreamServer will
// result in compilation errors.
type UnsafeClientStreamServerStreamServer interface {
	mustEmbedUnimplementedClientStreamServerStreamServer()
}

func RegisterClientStreamServerStreamServer(s grpc.ServiceRegistrar, srv ClientStreamServerStreamServer) {
	// If the following call pancis, it indicates UnimplementedClientStreamServerStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientStreamServerStream_ServiceDesc, srv)
}

func _ClientStreamServerStream_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamServerStreamServer).Chat(&grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientStreamServerStream_ChatServer = grpc.BidiStreamingServer[ChatMessage, ChatMessage]

// ClientStreamServerStream_ServiceDesc is the grpc.ServiceDesc for ClientStreamServerStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStreamServerStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.ClientStreamServerStream",
	HandlerType: (*ClientStreamServerStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ClientStreamServerStream_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "demo.proto",
}
